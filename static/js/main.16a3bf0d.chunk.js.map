{"version":3,"sources":["Components/Form.jsx","Actions/Acttion.js","Components/Display.jsx","App.js","reportWebVitals.js","Reducers/FormReducer.js","Reducers/RootReducer.js","index.js"],"names":["Form","dispatch","useDispatch","className","id","type","placeholder","required","onClick","title","document","getElementById","value","ttl","val","Display","useSelector","state","form","map","index","content","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","formReducer","action","copy_state","splice","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode"],"mappings":"kOAIe,SAASA,IACpB,IAAMC,EAASC,cACf,OACI,sBAAKC,UAAU,QAAf,UACI,6CACA,iCACI,0CACA,uBACGC,GAAG,QACHC,KAAK,OACLC,YAAY,kBACZC,UAAQ,IAEX,4CACA,0BACIH,GAAG,UACHE,YAAY,oBACZC,UAAQ,IAEZ,wBAAQF,KAAK,SAASG,QAAS,kBAAIP,GCtB1BQ,EDsB8CC,SAASC,eAAe,SAASC,MCtBzEA,EDsB+EF,SAASC,eAAe,WAAWC,MCpBzI,CACIP,KAAK,OACLQ,IAAIJ,EACJK,IAAIF,KALQ,IAACH,EAAMG,GDsBf,4BEnBD,SAASG,IACpB,IAAMH,EAAMI,aAAY,SAAAC,GAAK,OAAEA,EAAMC,QAC/BjB,EAASC,cACf,OACI,sBAAKC,UAAU,UAAf,UACA,4CACA,qBAAKA,UAAU,QAAf,SACIS,EAAMO,KAAI,SAACL,EAAIM,GACH,OAAU,gCACA,sBAAiBjB,UAAU,YAA3B,UACI,8BAAMW,EAAIL,QACV,wBAAQD,QAAS,kBAAIP,EDFnD,CACII,KAAK,SACLe,MCAqEA,KAA3C,iBAFMA,GAIV,qBAAKjB,UAAU,cAAf,SAA8BW,EAAIO,YALxBD,WCG7BE,MAXf,WACI,OACE,qCACA,oBAAInB,UAAU,UAAd,2BACA,cAACH,EAAD,IACA,uBACA,cAACe,EAAD,QCESQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,cCOCQ,EAZG,WAAoB,IAAnBf,EAAkB,uDAAZ,GAAGgB,EAAS,uCAClC,OAAOA,EAAO5B,MACV,IAAK,OACD,MAAM,GAAN,mBAAWY,GAAX,CAAiB,CAACR,MAAMwB,EAAOpB,IAAIQ,QAAQY,EAAOnB,OACtD,IAAK,SACD,IAAIoB,EAAW,YAAKjB,GAEpB,OADAiB,EAAWC,OAAOF,EAAOb,MAAM,GACxBc,EACV,QACI,OAAOjB,ICJJmB,EAHGC,YAAgB,CAC9BnB,KAAKc,ICIHM,EAAMC,YAAYH,GACxBI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACA,cAAC,EAAD,QAGF5B,SAASC,eAAe,SAM1BY,M","file":"static/js/main.16a3bf0d.chunk.js","sourcesContent":["import{useDispatch} from 'react-redux';\r\nimport {formAction} from '../Actions/Acttion';\r\n\r\n//Form Component - Adding the inputed values to the state once we clicked the addnote.\r\nexport default function Form(){\r\n    const dispatch=useDispatch()\r\n    return(\r\n        <div className=\"forms\">\r\n            <div>Add a Note</div>\r\n            <form>\r\n                <label>Title</label>\r\n                <input \r\n                   id=\"title\"\r\n                   type=\"text\"\r\n                   placeholder=\"Enter the title\"\r\n                   required>\r\n                </input>\r\n                <label>Context</label>\r\n                <textarea\r\n                    id=\"content\"\r\n                    placeholder=\"Enter the Content\"\r\n                    required>\r\n                </textarea>\r\n                <button type=\"button\" onClick={()=>dispatch(formAction(document.getElementById(\"title\").value,document.getElementById(\"content\").value))}>Add Note</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}","//action for adding a note\r\nexport const formAction=(title,value)=>{\r\n    return(\r\n        {\r\n            type:\"note\",\r\n            ttl:title,\r\n            val:value\r\n        }\r\n    )\r\n}\r\n//action for deleting a note\r\nexport const deleteAction=(ind)=>{\r\n    return(\r\n        {\r\n            type:\"delete\",\r\n            index:ind\r\n        }\r\n    )\r\n}","import{useSelector,useDispatch} from 'react-redux';\r\nimport { deleteAction } from '../Actions/Acttion';\r\n\r\n//Display Component - Displaying the state values ie(Forms we fill).\r\nexport default function Display(){\r\n    const value=useSelector(state=>state.form)\r\n    const dispatch=useDispatch();\r\n    return(\r\n        <div className=\"display\">\r\n        <div>All Notes</div>\r\n        <div className=\"notes\">\r\n           {value.map((val,index)=>{\r\n                        return (  <div key={index}>\r\n                                  <div key={index} className=\"title_btn\">\r\n                                      <div>{val.title}</div>\r\n                                      <button onClick={()=>dispatch(deleteAction(index))}>x</button>\r\n                                  </div>\r\n                                  <div className=\"description\">{val.content}</div>\r\n                                   </div>\r\n                        )\r\n            })}\r\n           </div>\r\n         \r\n         </div>\r\n    )\r\n}","import './App.css';\nimport Form from './Components/Form';       //Form componet for displaying the Notes form\nimport Display from './Components/Display'; //Display Component for displaying the FormNotes in underneath of form.\n\nfunction App() {\n    return(\n      <>\n      <h1 className=\"heading\">PROGRAD NOTES</h1>\n      <Form/>\n      <hr></hr>\n      <Display/>\n      </>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","//formReducer - If action type is \"note\" then we need to append the values to the state\r\n//              If action is \"delete\" then we need to delete that note from the state\r\nconst formReducer=(state=[],action)=>{\r\n   switch(action.type){\r\n       case \"note\":\r\n           return [...state,{title:action.ttl,content:action.val}];\r\n       case \"delete\":\r\n           var copy_state= [...state]\r\n           copy_state.splice(action.index,1)\r\n           return copy_state\r\n        default:\r\n            return state;\r\n   }\r\n}\r\nexport default formReducer;","import formReducer from './FormReducer';\r\n\r\nimport{combineReducers} from 'redux';    //CombineReducer for Combining all Reducers but here We have only one reducer ie(FormReducer)\r\n\r\nconst rootReducer=combineReducers({\r\n    form:formReducer\r\n})\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {createStore} from 'redux';              //Importing createStore for creating a store\nimport {Provider} from 'react-redux';           //Importing Provider for providing the store ie(all states) for all the components\nimport rootReducer from './Reducers/RootReducer';//Contain reducer function\n\nconst store=createStore(rootReducer)             //Creating Store\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>                \n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}